import pathlib
import pandas as pd
import numpy as np
from typing import Union, Tuple
import matplotlib.pyplot as plt


class QuestionnaireAnalysis:
    """
    Reads and analyzes data generated by the questionnaire experiment.
    Should be able to accept strings and pathlib.Path objects.
    """
    #

    def __init__(self, data_fname: Union[pathlib.Path, str]):
        self.data = pd.DataFrame
        if isinstance(data_fname, str):
            self.data_fname = pathlib.Path(data_fname)
        elif isinstance(data_fname, pathlib.Path):
            self.data_fname = data_fname
        else:
            raise TypeError
        if not (self.data_fname.is_file and self.data_fname.exists()):
            raise ValueError

    def read_data(self):
        """
        Reads the json data located in self.data_fname into memory, to
        the attribute self.data.
        """
        df = pd.read_json(self.data_fname)
        self.data = df

    def show_age_distrib(self) -> Tuple[np.ndarray, np.ndarray]:
        """
        Calculates and plots the age distribution of the participants.
        Returns a tuple containing two numpy arrays:
        The first item being the number of people in a given bin.
        The second item being the bin edges.
        """
        df = self.data
        array = df['age'].values
        num, edges = np.histogram(array, bins=10, range=(0, 100))
        plt.hist(array, bins=10, range=(0, 100))
        plt.show()
        tup = (num, edges)
        return tup

    def remove_rows_without_mail(self) -> pd.DataFrame:
        """
        Checks self.data for rows with invalid emails, and removes them.
        Returns the corrected DataFrame, i.e. the same table but with
        the erroneous rows removed and the (ordinal) index after a reset.
        """
        df = self.data
        new_df = df[df['email'].str.endswith('.com') | df['email'].str.endswith('.c')]
        new_df = new_df[new_df['email'].str.contains('@')]
        new_df = new_df[~new_df['email'].str.contains(r'@.', regex=0)]
        new_df = new_df[~new_df['email'].str.startswith(r'@')].reset_index()
        return new_df

    def fill_na_with_mean(self) -> Union[pd.DataFrame, np.ndarray]:
        """
        Finds, in the original DataFrame, the subjects that didn't answer
        all questions, and replaces that missing value with the mean of the
        other grades for that student. Returns the corrected DataFrame,
        as well as the row indices of the students that their new grades
        were generated.
        """
        df = self.data
        mask = df.loc[:, 'q1':'q5'].isna().max(axis=1)
        m = df.loc[:, 'q1':'q5'].mean(axis=1)
        for i, col in enumerate(df.loc[:, 'q1':'q5']):
            df[col] = df[col].fillna(m)
        indexes = mask[mask].index
        return df, indexes

    def correlate_gender_age(self) -> pd.DataFrame:
        """
        Looks for a correlation between the gender of the subject, their age
        and the score for all five questions.
        Returns a DataFrame with a MultiIndex containing the gender and whether
        the subject is above 40 years of age, and the average score in each of
        the five questions.
        """
        self.data.set_index(['gender', 'age'], append=True)
        self.data['over40'] = self.data['age'] > 40
        return self.data.groupby(['gender', 'over40']).mean()


if __name__ == "__main__":
    questionnaire = QuestionnaireAnalysis(pathlib.Path("data.json"))
    questionnaire.read_data()

